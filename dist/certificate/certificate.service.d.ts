import { ConfigService } from '@nestjs/config';
import { Repository } from 'typeorm';
import { Application } from '../application/entities/application.entity';
import { SendGridService } from '../notification/sendgrid.service';
import { Payment } from '../payment/entities/payment.entity';
import { IPage, IPagination } from '../shared/interfaces/page.interface';
import { User } from '../users/entities/user.entity';
import { CertificateFilterOptionsDto } from './dto/certificate-filter-options.dto';
import { UpdateCertificateStatusDto } from './dto/update-certificate-status.dto';
import { Certificate } from './entities/certificate.entity';
import { ECertificateStatus } from './enums';
export declare class CertificateService {
    private readonly certificateRepo;
    private sendgridService;
    private configService;
    private readonly appRepo;
    private readonly paymentRepo;
    private readonly userRepo;
    constructor(certificateRepo: Repository<Certificate>, sendgridService: SendGridService, configService: ConfigService, appRepo: Repository<Application>, paymentRepo: Repository<Payment>, userRepo: Repository<User>);
    findAll(user: User, options: IPagination, { sort, ...filterOptions }: CertificateFilterOptionsDto): Promise<IPage<Certificate>>;
    renewCertificate(uniqueId: string): Promise<Certificate>;
    isRenewingCertificate(uniqueId: string): Promise<Certificate>;
    updateStatus(uniqueId: string, status: ECertificateStatus): Promise<Certificate>;
    findCertificate(uniqueId: string): Promise<Certificate>;
    findCertificateByApplicantName(name: string): Promise<Certificate>;
    findCertificateByLoggedApplicant(user: User): Promise<Certificate>;
    updateMultipleStatuses(updateStatusDto: UpdateCertificateStatusDto): Promise<void>;
    findOne(uniqueId: string): Promise<Certificate>;
    setExpiration(yr: number, date?: Date): any;
}
