image: docker:git
services:
    - docker:dind

stages:
    - check-dev # This stage will consist of 3 different jobs (Build,Lint and Test)
    - docker_image_build # This stage consist of a job to build the docker image.
    - deploy # This stage consist of a job to deploy the built docker image.
    - dump # This stage consists of dumping the database

variables:
    BASE_TAG_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    NODE_IMAGE_VERSION: node:16-alpine
    BASE_DEV_SERVER_PATH: /home/harambeedev/tss/api
    BASE_STG_SERVER_PATH: /home/tssdev/tss/staging/api
    BASE_PROD_SERVER_PATH: /home/tssprod/api
    DEV_PROJECT_NAME: tss-api-dev
    STG_PROJECT_NAME: tss-api-stg
    PROD_PROJECT_NAME: tss-api-prod

#This job help us build/create an artifact
Build_the_project:
    stage: check-dev
    image: $NODE_IMAGE_VERSION
    script:
        - yarn install
        - yarn build
    artifacts:
        paths:
            - node_modules/
    rules:
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'

#This job ensure our syntax is okay
eslint:
    stage: check-dev
    script:
        - yarn lint
    image: $NODE_IMAGE_VERSION
    rules:
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'
    needs:
        - Build_the_project

#This job will run all the available unit test in the project
run_test:
    stage: check-dev
    coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
    artifacts:
        when: always
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage/cobertura-coverage.xml
    image: $NODE_IMAGE_VERSION
    services:
        - postgres:latest
    variables:
        POSTGRES_DB: tss_api_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_HOST: postgres
    before_script:
        - echo "*********** Creating .env file... ************"
        - cp $TEST_ENV_VAR .env
    after_script:
        - echo "*********** Deleting .env file after tests... ************"
        - rm .env
    script:
        - yarn
        - yarn test:e2e --runInBand
    rules:
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'
        - if: $CI_COMMIT_BRANCH == 'dev'

#This  job will build the dockerfile to provide a docker image to be pushed inside gitlab registry
build_docker_file:
    stage: docker_image_build
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -f Dockerfile.dev --cache-from $BASE_TAG_NAME:latest -t $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA -t $BASE_TAG_NAME:latest .
        - docker push $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA
        - docker push $BASE_TAG_NAME:latest
    only:
        - dev

#This job will deploy our application to the development environment and run in a docker container
deploy_to_dev_environment:
    stage: deploy
    script:
        - 'which ssh-agent || (  apk update  && apk add openssh-client )'
        - 'which rsync || ( apk update  && apk add rsync  )'
        - eval $(ssh-agent -s)
        # Inject the remote's private key
        - echo "$EC2_DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Append keyscan output into known hosts
        - ssh-keyscan $EC2_DEV_PUBLIC_IP_ADDRESS >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - echo "Deploy to dev environment"
        - echo $CI_PROJECT_DIR
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz --exclude=".*" /$CI_PROJECT_DIR/docker-compose/dev.docker-compose.yml $EC2_DEV_USER@$EC2_DEV_PUBLIC_IP_ADDRESS:$BASE_DEV_SERVER_PATH
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz --exclude=".*" $DEV_ENV_VAR $EC2_DEV_USER@$EC2_DEV_PUBLIC_IP_ADDRESS:$BASE_DEV_SERVER_PATH
        - echo "STARTING DOCKER IMAGE"
        - ssh $EC2_DEV_USER@$EC2_DEV_PUBLIC_IP_ADDRESS "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY &&
          cd $BASE_DEV_SERVER_PATH &&
          mv DEV_ENV_VAR .env &&
          docker image rm -f $BASE_TAG_NAME:latest &&
          docker pull $BASE_TAG_NAME:latest &&
          docker-compose -f $BASE_DEV_SERVER_PATH/dev.docker-compose.yml -p  $DEV_PROJECT_NAME down -v &&
          docker-compose -f $BASE_DEV_SERVER_PATH/dev.docker-compose.yml -p  $DEV_PROJECT_NAME up -d"
    environment:
        name: development
        url: http://tss-api.awesomity.rw/
    only:
        - dev

build_staging_docker_file:
    stage: docker_image_build
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -f Dockerfile.dev --cache-from $BASE_TAG_NAME:latest -t $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA -t $BASE_TAG_NAME:latest .
        - docker push $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA
        - docker push $BASE_TAG_NAME:latest
    only:
        - staging

#This job will deploy our application to the development environment and run in a docker container
deploy_to_staging_environment:
    stage: deploy
    script:
        - 'which ssh-agent || (  apk update  && apk add openssh-client )'
        - 'which rsync || ( apk update  && apk add rsync  )'
        - eval $(ssh-agent -s)
        # Inject the remote's private key
        - echo "$AOS_STG_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Append keyscan output into known hosts
        - ssh-keyscan -p 2200 $AOS_STG_PUBLIC_IP_ADDRESS >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - echo "Deploy to staging environment"
        - echo $CI_PROJECT_DIR
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz -e 'ssh -p 2200' --exclude=".*" /$CI_PROJECT_DIR/docker-compose/stg.docker-compose.yml $AOS_STG_USER@$AOS_STG_PUBLIC_IP_ADDRESS:$BASE_STG_SERVER_PATH
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz -e 'ssh -p 2200' --exclude=".*" $STG_ENV_VAR $AOS_STG_USER@$AOS_STG_PUBLIC_IP_ADDRESS:$BASE_STG_SERVER_PATH
        - echo "STARTING DOCKER IMAGE"
        - ssh -p 2200 $AOS_STG_USER@$AOS_STG_PUBLIC_IP_ADDRESS "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY &&
          cd $BASE_STG_SERVER_PATH &&
          mv STG_ENV_VAR .env &&
          docker image rm -f $BASE_TAG_NAME:latest &&
          docker pull $BASE_TAG_NAME:latest &&
          docker-compose -f $BASE_STG_SERVER_PATH/stg.docker-compose.yml -p  $STG_PROJECT_NAME down -v &&
          docker-compose -f $BASE_STG_SERVER_PATH/stg.docker-compose.yml -p  $STG_PROJECT_NAME up -d"
    environment:
        name: staging
        url: http://tss-api.awesomity.rw/
    only:
        - staging

build_prod_docker_file:
    stage: docker_image_build
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -f Dockerfile --cache-from $BASE_TAG_NAME:latest -t $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA -t $BASE_TAG_NAME:latest .
        - docker push $BASE_TAG_NAME:$CI_COMMIT_SHORT_SHA
        - docker push $BASE_TAG_NAME:latest
    only:
        - main

#This job will deploy our application to the development environment and run in a docker container
deploy_to_prod_environment:
    stage: deploy
    script:
        - 'which ssh-agent || (  apk update  && apk add openssh-client )'
        - 'which rsync || ( apk update  && apk add rsync  )'
        - eval $(ssh-agent -s)
        # Inject the remote's private key
        - echo "$AOS_PROD_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Append keyscan output into known hosts
        - ssh-keyscan -p 2200 $AOS_PROD_PUBLIC_IP_ADDRESS >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - echo "Deploy to production environment"
        - echo $CI_PROJECT_DIR
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz -e 'ssh -p 2200' --exclude=".*" /$CI_PROJECT_DIR/docker-compose/prod.docker-compose.yml $AOS_PROD_USER@$AOS_PROD_PUBLIC_IP_ADDRESS:$BASE_PROD_SERVER_PATH
        - rsync --rsync-path=/usr/bin/rsync --delete -avuz -e 'ssh -p 2200' --exclude=".*" $PROD_ENV_VAR $AOS_PROD_USER@$AOS_PROD_PUBLIC_IP_ADDRESS:$BASE_PROD_SERVER_PATH
        - echo "STARTING DOCKER IMAGE"
        - ssh -p 2200 $AOS_PROD_USER@$AOS_PROD_PUBLIC_IP_ADDRESS "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY &&
          cd $BASE_PROD_SERVER_PATH &&
          mv PROD_ENV_VAR .env &&
          docker image rm -f $BASE_TAG_NAME:latest &&
          docker pull $BASE_TAG_NAME:latest &&
          docker-compose -f $BASE_PROD_SERVER_PATH/prod.docker-compose.yml -p  $PROD_PROJECT_NAME down -v &&
          docker-compose -f $BASE_PROD_SERVER_PATH/prod.docker-compose.yml -p  $PROD_PROJECT_NAME up -d"
    environment:
        name: production
        url: http://api.dbi.rw/
    only:
        - main
dump-db-staging:
    stage: dump
    variables:
        LANG: eu_US.UTF-8
        GIT_STRATEGY: none
    services:
        - docker:dind
    image: docker:git
    artifacts:
        paths:
            - $CI_PROJECT_DIR/backup/
        expire_in: '2d'
    before_script:
        # Check for ssh-agent and install if not present
        - 'which ssh-agent || (  apk update  && apk add openssh-client )'
        - eval $(ssh-agent -s)
        # Inject the remote's private key
        - echo "$AOS_STG_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Append keyscan output into known hosts
        - ssh-keyscan -p 2200 $AOS_STG_PUBLIC_IP_ADDRESS >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
    script:
        - echo "Creating DB dump file"
        - cd $CI_PROJECT_DIR
        - mkdir backup
        - DOCKER_HOST="ssh://$AOS_STG_USER@$AOS_STG_PUBLIC_IP_ADDRESS:2200" docker container exec -t tss-psqldb-stg pg_dump --column-inserts -U postgres tss_api > $CI_PROJECT_DIR/backup/tss_stg_dump-$(date +%Y-%m-%d_%H.%M.%S).bak
    when: manual
    only:
        - staging

dump-db-prod:
    stage: dump
    variables:
        LANG: eu_US.UTF-8
        GIT_STRATEGY: none
    services:
        - docker:dind
    image: docker:git
    artifacts:
        paths:
            - $CI_PROJECT_DIR/backup/
        expire_in: '5d'
    before_script:
        # Check for ssh-agent and install if not present
        - 'which ssh-agent || (  apk update  && apk add openssh-client )'
        - eval $(ssh-agent -s)
        # Inject the remote's private key
        - echo "$AOS_PROD_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        # Append keyscan output into known hosts
        - ssh-keyscan -p 2200 $AOS_PROD_PUBLIC_IP_ADDRESS >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
    script:
        - echo "Creating DB dump file"
        - cd $CI_PROJECT_DIR
        - mkdir backup
        - DOCKER_HOST="ssh://$AOS_PROD_USER@$AOS_PROD_PUBLIC_IP_ADDRESS:2200" docker container exec -t tss-psqldb-prod pg_dump --column-inserts -U postgres tss_api > $CI_PROJECT_DIR/backup/tss_prod_dump-$(date +%Y-%m-%d_%H.%M.%S).bak
    when: manual
    only:
        - main
